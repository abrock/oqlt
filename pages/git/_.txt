oqlt benutzt Git[1] für Datenaustausch, interne Kommunikation und als 
Wissensdatenbank. Daher sollte jedes Mitglied ausreichend gut mit diesem 
mächtigen Werkzeug umgehen können.

[1] http://git.or.cz/



== Grundlegende Befehle ==

-- GitHub einrichten --

Mach dir einen Account auf github.com und teile Scy deinen Benutzernamen mit, 
um Schreibzugriff auf unser Repository unter http://github.com/scy/oqlt zu 
bekommen.

Du musst einen SSH-Key zu GitHub hochladen, mit dem du dann dein 
Git-Repository über SSH syncen kannst. Lies dazu am besten "Providing your SSH 
Key" unter http://github.com/guides/home.


-- Basiskonfiguration --

git config --global user.name "Vorname Nachname"
git config --global user.email "deine.email@example.com"
git config --global core.autocrlf false


-- Erstes Auschecken des Repositories --

git clone git@github.com:scy/oqlt.git
  (falls du Schreibrechte hast)

git clone git://github.com/scy/oqlt.git
  (für einen Nur-Lese-Zugang)


-- SSH richtig einstellen --

Wenn Git etwas sagt wie "Permission denied (publickey). fatal: The remote end 
hung up unexpectedly" obwohl man den Public Key mitgeteilt hat, kann folgendes 
helfen:

cd ~/.ssh
ssh-add deinkey

Sollte sich ssh-add beschweren, vorher noch "exec ssh-agent bash" eingeben.

Der Grund für das Problem liegt dann womöglich darin, dass man nicht den 
Standard-Dateinamen für den SSH-Key benutzt hat (id_rsa), sondern beim 
Generieren mit ssh-keygen einen eigenen angegeben. Diesen findet ssh beim 
Verbindungsaufbau nicht (außer man verrät mit "-i dateiname", wo er liegt) und 
authentifiziert sich deshalb nicht.

Daher mein Tipp: Den SSH-Key mit "ssh-keygen -t rsa -b 4096" generieren, keine 
Passphrase, und den Standard-Keynamen beibehalten.


-- Repository auf den neuesten Stand bringen --

Hier sollte _nicht_ "git pull" verwendet werden, sondern folgendes:
git fetch
git rebase origin

Damit werden lokale Änderungen auf den aktuellen Stand des zentralen 
Repositories angewendet. Unschöne "merged branch ..."-Commits entfallen 
dadurch.


-- Was hat sich geändert? --

Nach einem "git fetch" (vor dem Rebase) lassen sich folgendermaßen die 
Änderungen entweder als Log-Einträge oder als Diff anzeigen:

  git log ..origin
  git diff ..origin


-- Schnell eine Änderung durchführen --

Wenn man in GitHub eine Datei betrachtet, kann man einfach auf "edit" 
klicken, die Datei im Browser bearbeiten und direkt committen. Praktisch!

Dabei sollte man sich allerdings bewusst sein, dass der entstehende Commit die 
Mailadresse tragen wird, die man bei GitHub eingetragen hat. Falls man dort 
mehrere eingetragen hat, ist es offenbar die erste.



Hier einige Links mit guter Dokumentation. Die ganze Liste kann man natürlich 
noch aufhübschen, aber das hat erst mal geringe Priorität.

- Git Community Book
  http://book.git-scm.com/

- Git Manual (die offizielle Anleitung)
  http://www.kernel.org/pub/software/scm/git/docs/user-manual.html

- Everyday Git With 20 Commands Or So (Beispiele aus dem echten Leben)
  http://www.kernel.org/pub/software/scm/git/docs/everyday.html

- Git für Subversion-Benutzer
  http://git.or.cz/course/svn.html

- Zusammenstellung von Daniel Robbins (Gentoo-Gründer)
  http://github.com/funtoo/portage/wikis/git-links

- Git Magic (einige interessante Tricks und Kniffe)
  http://www-cs-students.stanford.edu/~blynn/gitmagic/index.html

- GitCasts (Screencasts für diverse Arbeitsschritte)
  http://gitcasts.com/

- A Gaggle Of Git Tips
  http://www.viget.com/extend/a-gaggle-of-git-tips/
